<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://club.black.co.at/log/feed.xml" rel="self" type="application/atom+xml" /><link href="https://club.black.co.at/log/" rel="alternate" type="text/html" /><updated>2020-12-07T02:19:26+00:00</updated><id>https://club.black.co.at/log/feed.xml</id><title type="html">DavidS’ log</title><author><name>David Schmitt</name></author><entry><title type="html">Google Analytics Changes</title><link href="https://club.black.co.at/log/posts/2020-10-10-ga-changes/index.html" rel="alternate" type="text/html" title="Google Analytics Changes" /><published>2020-10-10T00:00:00+00:00</published><updated>2020-10-10T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-10-10-ga-changes/ga-changes</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-10-10-ga-changes/index.html">&lt;p&gt;For one of the webpages I’m responsible for, I’m tracking traffic through &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Analytics&quot;&gt;Google Analytics&lt;/a&gt;.
One of the things that really irked me was a massive distortion in the data through traffic that was not very natural to the eye.
Looking for its details found a few posts across the web complaining about similar bot traffic, but no solution that worked for me.
Since the start of September, this traffic has evaporated without me doing anything, and now look much more like I’d expect it.&lt;/p&gt;

&lt;p&gt;Here’s browser stats from August:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/log/assets/2020-10-10-ga-changes/august.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and from September:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/log/assets/2020-10-10-ga-changes/september.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On a related topic, I’ve recently seen folks point out that a lot of browers are switching to auto-blocking google analytics and related cookies, to the point where GA is undercounting traffic by up to 50%.
I don’t have a lot of need for user-tracking, but I would like to know general and accurate stats and trends for how specific parts for my webpages are doing.
If you have heard of or experience with a good product that can help with that, I’d be grateful if you clued me in!&lt;/p&gt;

&lt;p&gt;Case in point: uBlock Origin originally blocked the screenshots on this post as they were had the words &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-analytics&lt;/code&gt; in the path:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/log/assets/2020-10-10-ga-changes/blocked.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="hosting" /><category term="web" /><category term="google-analytics" /><summary type="html">For one of the webpages I’m responsible for, I’m tracking traffic through Google Analytics. One of the things that really irked me was a massive distortion in the data through traffic that was not very natural to the eye. Looking for its details found a few posts across the web complaining about similar bot traffic, but no solution that worked for me. Since the start of September, this traffic has evaporated without me doing anything, and now look much more like I’d expect it.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt8: automated deploy with git-annex</title><link href="https://club.black.co.at/log/posts/2020-09-12-git-automated-deploy/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt8: automated deploy with git-annex" /><published>2020-09-12T00:00:00+00:00</published><updated>2020-09-12T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-09-12-git-automated-deploy/git-automated-deploy</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-09-12-git-automated-deploy/index.html">&lt;p&gt;Today has been a mixed bag of stuff.
For the next two weeks you can find the stream on &lt;a href=&quot;twitch.tv/dev_el_ops/videos&quot;&gt;my twitch channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automated updates:&lt;/strong&gt; Created a quick &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post-receive&lt;/code&gt; hook&lt;/a&gt; to update the site when git-annex syncs:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open3&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pushed_refs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readlines&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git annex post-receive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;stdin_data: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pushed_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/srv/cheesy.at/git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle config set path /srv/cheesy.at/gems&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JEKYLL_ENV=production bundle exec jekyll build --strict --trace --destination /srv/cheesy.at/site --verbose --incremental&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DavidS/cheesy.at/blob/244858cace4dd76515731dbfa7fdd509b97cbf73/bin/post-receive.rb&quot;&gt;This&lt;/a&gt; does the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git annex post-receive&lt;/code&gt; default updates which (I assume) put all the files in place.
Afterwards it configures the gem cache,
installs the bundle,
and runs a incremental site build.&lt;/p&gt;

&lt;p&gt;On my tests with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git annex sync --content&lt;/code&gt; this worked fine and updated the test site with the new files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public test site:&lt;/strong&gt; I’ve also puttered around with adding a new site &lt;a href=&quot;https://github.com/DavidS/dasz-configuration/commit/0eeabaf1af9ed2b43c8ab738b963c2455db49bfc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.cheesy.at&lt;/code&gt;&lt;/a&gt; to host the in-progress work, but screwed up the DNS configuration and am still waiting on &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;’s verification systems to refresh their cache.
Luckily this refresh happened while I was still here, so &lt;a href=&quot;https://test.cheesy.at/&quot;&gt;https://test.cheesy.at/&lt;/a&gt; is now deployed and secured.
See the following commits for some more tweaking required to get it working.
The actual private keys are deployed through a separate private repo that is not shared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Persistent SSH hostkeys:&lt;/strong&gt; Finally I’ve added &lt;a href=&quot;https://github.com/DavidS/cheesy.at/commit/4c4683a49b6eaaef90e075c04707ad4fc43e775f&quot;&gt;some code&lt;/a&gt; to the Dockerfile to preserve ssh host keys across rebuilds.
The keys, again, are stored outside the published repo.
Without this change, everytime a new version of the docker container is started, it would give nasty errors about the SSH host keys being changed.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><category term="git" /><summary type="html">Today has been a mixed bag of stuff. For the next two weeks you can find the stream on my twitch channel.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt7: automated sync and deploy with git-annex</title><link href="https://club.black.co.at/log/posts/2020-09-07-git-annex-sync-deploy/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt7: automated sync and deploy with git-annex" /><published>2020-09-07T00:00:00+00:00</published><updated>2020-09-07T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-09-07-git-annex-sync-deploy/git-annex-sync-deploy</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-09-07-git-annex-sync-deploy/index.html">&lt;p&gt;After last week’s &lt;a href=&quot;/log/posts/2020-09-01-revisiting-cheesy-gallery/index.html&quot;&gt;reintroduction&lt;/a&gt; to the plugin,
today was focused on getting the data to and from the server.&lt;/p&gt;

&lt;p&gt;In the morning session a complete re-init of the cheesy.at repo lead to great success using the git-annex webapp assistant to sync data to the repo on the server and update the checkout there.&lt;/p&gt;

&lt;p&gt;In the afternoon session I worked on two major points: &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/8376&quot;&gt;fixing the symlink handling of jekyll&lt;/a&gt;
and getting the docker container for deployment up to scratch to the point where I can now build the site.&lt;/p&gt;

&lt;p&gt;The latter required a few additional build dependencies so the native extensions can build.
Now the site builds correctly on the hosting server:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@33bb570ae200:/srv/cheesy.at/git# JEKYLL_ENV=production bundle exec jekyll build --strict --trace --incremental --destination ../site
Configuration file: /srv/cheesy.at/git/_config.yml
            Source: /srv/cheesy.at/git
       Destination: /srv/cheesy.at/site
 Incremental build: enabled
      Generating...
/var/lib/gems/2.7.0/gems/sorbet-runtime-0.5.5891/lib/types/private/methods/call_validation.rb:126: warning: Passing the keyword argument as the last hash parameter is deprecated
/var/lib/gems/2.7.0/gems/cheesy-gallery-0.5.0/lib/cheesy-gallery/gallery_index.rb:11: warning: The called method `read_content' is defined here
       Jekyll Feed: Generating feed for posts
     Build Warning: Layout 'nav_menu_item' requested in _posts/2014-04-25-21024.html does not exist.
     Build Warning: Layout 'nav_menu_item' requested in _posts/2014-04-25-21025.html does not exist.
     Build Warning: Layout 'nav_menu_item' requested in _posts/2014-04-25-21026.html does not exist.
     Build Warning: Layout 'nav_menu_item' requested in _posts/2014-04-25-21027.html does not exist.
     Build Warning: Layout 'nav_menu_item' requested in _posts/2014-04-25-home.html does not exist.
     Build Warning: Layout 'ecwd_event' requested in _posts/2015-11-05-rock-in-vienna.html does not exist.
     Build Warning: Layout 'ecwd_calendar' requested in _posts/2015-11-05-cd.html does not exist.
     Build Warning: Layout 'ecwd_event' requested in _posts/2015-11-05-u2.html does not exist.
     Build Warning: Layout 'ecwd_event' requested in _posts/2015-11-05-the-prodigy.html does not exist.
     Build Warning: Layout 'ecwd_event' requested in _posts/2015-11-05-bryan-adams.html does not exist.
          Conflict: The URL '/srv/cheesy.at/site/about/index.html' is the destination for the following pages: about.md, about/index.html
                    done in 13.425 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
root@33bb570ae200:/srv/cheesy.at/git# rm -Rf _site/
root@33bb570ae200:/srv/cheesy.at/git# ls ../site/
2006  2009  2012  2015	2018	  about      feed.xml	 index.html
2007  2010  2013  2016	2019	  assets     fotos
2008  2011  2014  2017	404.html  export.rb  gaestebuch
root@33bb570ae200:/srv/cheesy.at/git#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly there is still a lot to do.
This still needs to be automated on push,
and the generated site is not actually available online.
Configuring a test host will likely be my next step as this will allow me to show off the work already done.
(I also expect it to be pretty easy and give me a nice success boost.)
The automation of build will happen in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post-receive&lt;/code&gt; hook,
which will need to be careful about which pushes trigger it (git-annex is a bit chatty there),
whether all annexed content is already available,
and to maintain correct permissions when content is being pushed by different users.
Currently half of the site is owned by root, which is not great.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><category term="git" /><summary type="html">After last week’s reintroduction to the plugin, today was focused on getting the data to and from the server.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt6: revisiting cheesy-gallery</title><link href="https://club.black.co.at/log/posts/2020-09-01-revisiting-cheesy-gallery/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt6: revisiting cheesy-gallery" /><published>2020-09-01T00:00:00+00:00</published><updated>2020-09-01T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-09-01-revisiting-cheesy-gallery/revisiting-cheesy-gallery</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-09-01-revisiting-cheesy-gallery/index.html">&lt;p&gt;Picking up &lt;a href=&quot;{ link _posts/2020-01-19-git-annex.md }&quot;&gt;where I left off almost 8 months ago&lt;/a&gt;,
I started working with the cheesy-gallery source today.
Over the last couple of days I’ve mostly updated and cleaned up the Gemfile and travis-ci configuration while re-familiarising me with the &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects&quot;&gt;project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To reserve the name and put a line in the sand,
I’ve released &lt;a href=&quot;https://rubygems.org/gems/cheesy-gallery&quot;&gt;cheesy-gallery v0.5.0&lt;/a&gt; to rubygems.&lt;/p&gt;

&lt;p&gt;The biggest success was integrating a lightbox into the new cheesy.at prototype templates.
This turned out to be a lot easier than I expected.
I went with &lt;a href=&quot;https://biati-digital.github.io/glightbox/&quot;&gt;glightbox&lt;/a&gt; which was quick to integrate and worked out of the box with minimal fussing.
The biggest issue was fixing the various examples I copied from to actually link up the selectors and run the code at the point in time during the page load where it’d actually do something.&lt;/p&gt;

&lt;p&gt;I also implemented and reverted a mtime-based cache.
It turns out if I specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--incremental&lt;/code&gt;,
jekyll does the right thing (not regenerate unchanged images) on its own!&lt;/p&gt;

&lt;p&gt;The last two(?) hours I spent trying to get git-annex to work on a non-bare repo on the main host to avoid a double checkout and the associated costs (2x50GB diskspace).
It turns out that my current hosting server has neither ruby 2.6 nor the most recent git-annex version.
I built a docker-compose container to deploy a debian testing image that has all the necessary modern bits installed,
has access to the git repo and can deploy the site
AND allows access using my ssh key without anyone noticing.
The deployment went well,
but git-annex was still very confused.
After all the various changes and tests and upgrades I did,
I probably need to start over and heed the lessons from &lt;a href=&quot;{ link _posts/2020-01-19-git-annex.md }&quot;&gt;pt5&lt;/a&gt; not using the assistant webapp to do the inital sync (and while testing not sync everything).&lt;/p&gt;

&lt;p&gt;I might need to publish the cheesy.at git repo with all the attendant scripts for archival reasons.&lt;/p&gt;

&lt;p&gt;You can see most of the work also in the &lt;a href=&quot;https://www.twitch.tv/videos/728001517&quot;&gt;twitch archive&lt;/a&gt;,
which will be available for another two weeks.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><category term="git" /><summary type="html">Picking up where I left off almost 8 months ago, I started working with the cheesy-gallery source today. Over the last couple of days I’ve mostly updated and cleaned up the Gemfile and travis-ci configuration while re-familiarising me with the project.</summary></entry><entry><title type="html">My new life as a streamer</title><link href="https://club.black.co.at/log/posts/2020-03-22-my-new-life-as-streamer/index.html" rel="alternate" type="text/html" title="My new life as a streamer" /><published>2020-03-22T00:00:00+00:00</published><updated>2020-03-22T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-03-22-my-new-life-as-streamer/my-new-life-as-streamer</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-03-22-my-new-life-as-streamer/index.html">&lt;p&gt;Over the last couple of months I’ve been slowly building out my home office.
Between that and the push to even more home office over the next months and &lt;a href=&quot;https://puppet.com&quot;&gt;Puppet&lt;/a&gt; instructing folks to take their chairs and monitors home,
I’ve considerably upgraded my working situation at home.
This post describes the current statue of the setup,
and what works and doesn’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/log/assets/2020-03-22-streaming/home-office.jpg&quot; alt=&quot;my home office setup&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;This workstation is based on my old development PC from &lt;a href=&quot;https://dasz.at&quot;&gt;my previous company, dasz.at&lt;/a&gt;.
Over the years I did upgrade it a bit here and there,
but the core is still the old PC from &lt;a href=&quot;https://www.ditech.at/&quot;&gt;ditech&lt;/a&gt;.
Here are the specs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz&lt;/li&gt;
  &lt;li&gt;16 GB RAM&lt;/li&gt;
  &lt;li&gt;750GB SSD (Crucial_CT750MX300SSD1)&lt;/li&gt;
  &lt;li&gt;GeForce GTX 1050 Ti (a recent addition)&lt;/li&gt;
  &lt;li&gt;2x Dell UH2715H (27”, 2560x1440, very nice, on loan from Puppet)&lt;/li&gt;
  &lt;li&gt;1x Samsung SyncMaster 2443BW (24”, 1920x1200, not quite as nice with a TN panel)&lt;/li&gt;
  &lt;li&gt;1x Philips 170S (17”, VGA, 1280x1024)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the “silent” option of midi cases from ditech - which is really quiet&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;HP Deluxe Webcam KQ246AA (1280x1024, on top of the 17” monitor on the shelf for a whole-office overview)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A4 TECH HD PC Camera (FullHD, but really strong compression to pipe it over USB2)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Blue Yeti Microphone&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the crappiest Logitech USB speakers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Microsoft Natural Ergonomic Keyboard 4000 v1.0&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Logitech M500 Corded Mouse&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;AmazonBasics Dual Side-by-Side Monitor Display Mounting Arm&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HumanScale single monitor mounting arm (on loan from Puppet))&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;HumanScale chair (a lot more comfortable than the IKEA chair, on loan from Puppet)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the greenscreen and proper lighting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3x 45W LED bars (6000K)&lt;/li&gt;
  &lt;li&gt;11’ green fabric&lt;/li&gt;
  &lt;li&gt;sturdy spring-loaded curtain rod&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I guess as a streamer,
I should add affiliate links to all those things;
luckily I don’t have to live off of it)&lt;/p&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;p&gt;This will be the longer, and hopefully more interesting section. Thanks to the greenscreen and a virtual webcam I can add various flourishes to “boring” meetings.&lt;/p&gt;

&lt;p&gt;The entire setup hinges on the &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS Studio&lt;/a&gt;. This is a commonly used open source software for streaming and it can ingest, transcode and transmit from a variety of sources to a variety of outputs.&lt;/p&gt;

&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Top Cam:&lt;/strong&gt; this camera is perched at the top of the 17” monitor up on the shelf.
Calls where I use this camera also go on the 17” monitor,
so I look at the camera when I look at the call.
It provides a good overview of my working situation and I like to use this for one-on-ones.
Because of the position of the camera and screen I do not “look at the computer” when using it,
because I turn away from my main working setup.
For casual group hangouts it is useful to show where I currently pay attention by looking at the camera or my monitors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/log/assets/2020-03-22-streaming/top-cam.png&quot; alt=&quot;top cam: watching from above, showing myself, my desk, the window behind me and the monitors (from the side, not showing their contents)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Face Cam:&lt;/strong&gt; This is a more “regular” angle for things like streaming or team-meetings.
Thanks to the greenscreen behind me, I can have all kinds of shenanigans going on behind me.&lt;/p&gt;

&lt;p&gt;My current favourite is &lt;a href=&quot;https://www.youtube.com/watch?v=bXlQ3Mw4uGc&quot;&gt;Flowers - Video Background HD 1080p&lt;/a&gt;. It has been incredibly invigorating seeing time and time again, folks reacting with joy and disbelief when I use it in a call.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/log/assets/2020-03-22-streaming/face-cam.jpg&quot; alt=&quot;face cam: full frontal shot of my face in front of the PC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Media Files:&lt;/strong&gt; Searching for “fullhd background” on youtube brings a big range of royalty-free (and some paid) backgrounds to put there.
Desktop wallpapers are another good source of backgrounds.
Of course I also snapped a picture from my webcam without me,
so that I can have my regular office background without having to handle the greenscreen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Applications:&lt;/strong&gt; Finally OBS can capture applications or entire screens.
This is useful to share what I’m working on.&lt;/p&gt;

&lt;h3 id=&quot;arrangement&quot;&gt;Arrangement&lt;/h3&gt;

&lt;p&gt;OBS uses the concept of “Scenes” to arrange multiple inputs into a final rendering.
I mainly use three scenes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Office Overview:&lt;/strong&gt; is just the Top Cam.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Presenter Mode:&lt;/strong&gt; is the Face Cam in full size plastered over a background of my choice.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Screen Cast:&lt;/strong&gt; is the common streaming setup of my face cam in the bottom right corner over the contents of my center screen.
This way I can share what I’m working on without being too much in the way but still showing up.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;/h3&gt;

&lt;p&gt;Depending on the situation I use two different outputs.
For calls, the “V4L2 Video Output” (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4l2sink&lt;/code&gt;) plugin provides a virtual webcam that can be used in bluejeans (Puppet’s video conferencing software of choice).
For &lt;a href=&quot;https://twitch.tv/dev_el_ops&quot;&gt;my brand new twitch channel&lt;/a&gt;, I use OBS built-in twitch client.
The latter is surely the more common use-case for OBS in general.&lt;/p&gt;

&lt;p&gt;As I’m streaming myself writing this post, OBS is currently upwards of two and a half cores, which is not great.
I’ve looked into hardware acceleration, and - in principle - OBS does support that.
As it turns out though, there is &lt;a href=&quot;https://obsproject.com/forum/threads/ffmpeg-vaapi-ignores-bitrate.116627/&quot;&gt;a bug regarding the bitrate setting on the H/W encoder&lt;/a&gt; where any user settings are ignored.
This leads to a unusably high-bitrate stream that is rejected by twitch.&lt;/p&gt;

&lt;p&gt;I’ve also tried using this setup with skypeforlinux.
Microsoft did a fantastic job of absolutely botching their v4l2 implementation.
Skype does only accept a single resolution and encoding from the webcam.
If the webcam does not provide that, it is not usable in Skype.
Loopback devices in V4L2 (which is what the v4l2sink plugin uses under the hood) do not support any mode negotiation or transcoding.
Changing the output resolution in OBS is possible, but tedious.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-plugins&quot;&gt;Installing the Plugins&lt;/h2&gt;

&lt;p&gt;The v4l2loopback kernel module and the OBS v42lsink plugin are not regularly available in Linux distributions.
On Debian at least there is v4l2loopback-dkms, which worked fine for me.
For everything else, &lt;a href=&quot;https://twitter.com/spotrh/&quot;&gt;Tom Callaway&lt;/a&gt; has a great writeup of how to compile and install at his “&lt;a href=&quot;https://spot.livejournal.com/327990.html&quot;&gt;Hacking the video stream for BlueJeans on Linux&lt;/a&gt;” over on lifejournal.
Thanks to &lt;a href=&quot;https://twitter.com/zhenech&quot;&gt;Evgeni Golov&lt;/a&gt; for making the connection.&lt;/p&gt;

&lt;h2 id=&quot;encoding-pitfall&quot;&gt;Encoding Pitfall&lt;/h2&gt;

&lt;p&gt;One of the things that OBS (and V4L2) do badly is choosing default video formats on webcams.
The default is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YUYV (4:2:2)&lt;/code&gt; which is a uncompressed pixelformat that takes up a lot of processing power and limits the framerate of the devices.
I’ve switched all inputs and the virtual webcam to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YU12 (Emulated)&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YUV420&lt;/code&gt;, which seems to be the same), which leads to a slight loss in color accuracy but allows devices to run at their full resolution and framerate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://packages.debian.org/qv4l2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qv4l2&lt;/code&gt;&lt;/a&gt; was very helpful to inspect the state of the cameras depending on the settings used in OBS.&lt;/p&gt;

&lt;h2 id=&quot;multi-cam-pitfall&quot;&gt;Multi-Cam Pitfall&lt;/h2&gt;

&lt;p&gt;One of the gotchas of this setup is that Firefox, Chrome and OBS basically index webcams by activation order (that is, when it was plugged in).
This is usually not an issue, as &lt;em&gt;normal&lt;/em&gt; people only have a single webcam, which will always be “the first”.
As explained above, my workstation has three webcams.
Which get loaded all at the same time when it boots.
Which basically means they come up in a random order.
Which leads to all the programs being very confused about which webcam is which.
On top of that, bluejeans in the browser always wants to use the first webcam by default, and goes into a reload loop if it doesn’t get permissions to use it.&lt;/p&gt;

&lt;p&gt;To avoid all of those issues, I wrote a short script that forces loading the webcams in the right order:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wait for all cameras to come online&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /dev/video&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lt&lt;/span&gt; 5 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /dev/video&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done

function &lt;/span&gt;manufacturer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; udevadm info &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;manufacturer | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;usbname&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;udevadm trigger &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--attr-match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;manufacturer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;manufacturer &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;unbind&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /sys/bus/usb/drivers/usb/unbind&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /sys/bus/usb/drivers/usb/bind&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

rmmod v4l2loopback

&lt;span class=&quot;nv&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /dev/video&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;usbname &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;unbind &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;modprobe v4l2loopback

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes use of relatively harsh unbind/bind cycle which disconnects the devices from the system at the bus level in the kernel.
Better than manually unplugging!&lt;/p&gt;

&lt;p&gt;After the script has run (I’ve put it into my startup scripts) the webcams are where they are expected and everyone is happy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the script relies on the USB devices coming up on the same ports, and being able to match based on manufacturer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion-and-remaining-tasks&quot;&gt;Conclusion and remaining Tasks&lt;/h2&gt;

&lt;p&gt;It took me a while, but I’m pretty pleased with how it turned out, if I may say so myself.
I did not expect folks to react so positively to having a weird background on a video call, but it definitely sweetens the deal.&lt;/p&gt;

&lt;p&gt;As next steps I still need to properly hang the lights, rather than having them propped up on a shelf. I also hope that this will resolve the final small shadow behind me, that is affecting the greenscreen.&lt;/p&gt;

&lt;p&gt;Getting a better webcam for the facecam is also on my wishlist.
Proper FullHD USB 3 cameras are not cheap though.
And on top of that, it is hard to understand from afar which cameras are actually good.
For example, the one A4 one is also advertised as FullHD (and to be fair does return 1920x1080 frames), but really does not come close to actually having that resolution in the picture.
You can judge from the screenshot above yourself.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="streaming" /><category term="programming" /><category term="sharing" /><category term="linux" /><category term="twitch" /><summary type="html">Over the last couple of months I’ve been slowly building out my home office. Between that and the push to even more home office over the next months and Puppet instructing folks to take their chairs and monitors home, I’ve considerably upgraded my working situation at home. This post describes the current statue of the setup, and what works and doesn’t work.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt5: git-annex</title><link href="https://club.black.co.at/log/posts/2020-01-19-git-annex/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt5: git-annex" /><published>2020-01-19T00:00:00+00:00</published><updated>2020-01-19T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-01-19-git-annex/git-annex</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-01-19-git-annex/index.html">&lt;p&gt;Today, a change of pace: getting 52GB of image files synced with &lt;a href=&quot;https://git-annex.branchable.com/&quot;&gt;git-annex&lt;/a&gt; in a way that still provides for a nice editing/publishing workflow and keeps history for blogposts around.&lt;/p&gt;

&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;hands-off file synchronisation&lt;/li&gt;
  &lt;li&gt;keep history of posts and pages&lt;/li&gt;
  &lt;li&gt;automatic server-side jekyll rendering&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Using the assistant through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git annex webapp&lt;/code&gt; on linux and the dmg on MacOS allows hands off syncing of git commits of blogs posts and annexed image files&lt;/li&gt;
  &lt;li&gt;git retains all the history. With a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup&lt;/code&gt; remote in annex image data can also be archived&lt;/li&gt;
  &lt;li&gt;I likely can hook into the regular post-receive hooks on the server to launch processing, but need to be cognizant of the extra branches annex is maintaining for state.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve now got a git-annex’d repo on my server, my workstation and my wife’s workstation happily keeping 52GB of images (in 27k files) in sync.&lt;/p&gt;

&lt;h1 id=&quot;insights&quot;&gt;Insights&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;27k files in a repository make git-annex assistant slow to start up (it’s rather annoying too to see only 10% of your SSD bandwidth and 12% CPU being used)&lt;/li&gt;
  &lt;li&gt;stopping syncing in the git-annex web ui works to stop it from autocommitting and syncing half-finished work&lt;/li&gt;
  &lt;li&gt;for big changes the CLI is &lt;strong&gt;a lot&lt;/strong&gt; better than the assistant, as the CLI can batch and parallelise. The assistant would upload each file individually&lt;/li&gt;
  &lt;li&gt;I would have saved a lot of time (and bandwidth) had I done the initial ingestion on the server instead of over the network&lt;/li&gt;
  &lt;li&gt;my devolo ‘dLAN 500 AVplus’ loses connection due to overheating after hours of full load&lt;/li&gt;
  &lt;li&gt;some weekends are less productive than others&lt;/li&gt;
  &lt;li&gt;don’t kill the assistant with ^C on the terminal&lt;/li&gt;
  &lt;li&gt;People are seriously &lt;a href=&quot;https://heiko-sieger.info/running-windows-10-on-linux-using-kvm-with-vga-passthrough/&quot;&gt;running Windows 10 in KVM&lt;/a&gt; with their GPU on PCI pass-through for gaming.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><category term="git" /><summary type="html">Today, a change of pace: getting 52GB of image files synced with git-annex in a way that still provides for a nice editing/publishing workflow and keeps history for blogposts around.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt4: Small Steps</title><link href="https://club.black.co.at/log/posts/2020-01-15-small-steps/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt4: Small Steps" /><published>2020-01-15T00:00:00+00:00</published><updated>2020-01-15T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-01-15-small-steps/small-steps</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-01-15-small-steps/index.html">&lt;p&gt;Following up on &lt;a href=&quot;../2020-01-11-plans-of-mice-and-persons&quot;&gt;the last post&lt;/a&gt;, today I’m catching up on reporting my latest activities.&lt;/p&gt;

&lt;h1 id=&quot;current-status&quot;&gt;Current Status&lt;/h1&gt;

&lt;p&gt;Last weekend was pretty annoying insights and also good research success. On Moday I could &lt;a href=&quot;https://twitter.com/dev_el_ops/status/1216807365787496453&quot;&gt;add another evening of work&lt;/a&gt; and got some things done:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Projects/cheesy-gallery$ git log --oneline
e014c6c (HEAD -&amp;gt; master, origin/master) link up sub-pages for tree navigation; add links to gallery.html
13e2379 apply default layout to empty index galleries
5baa3ea Let rubocop sort out my laziness
9e23612 fix bug where main gallery was not correctly identified
210ccdb avoid wrecking parent relationships with additional pages
de23b14 whitespace fixes
e9f7c08 add 'parent' to each gallery; add parent link to gallery.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With these changes in place, the gallery pages now get proper tree navigation where you can jump from any index to its parent, and all sub-pages.&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;With the new confidence, I did some planning and rearranging on &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1&quot;&gt;the board&lt;/a&gt;. The next thing will be a bigger jump with &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1#card-31583024&quot;&gt;“render thumbnails for pictures”&lt;/a&gt;. This will make the gallery more presentable and start approaching something that actually works. I’m planning on following other project’s lead and use rmagic for the image manipulation. The goal is for each image in a gallery render out a square thumbnail in a (configurable??) size and attach enough information about that thumbnail to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; information so that the layout can use the thumbnail as link to the actual picture. This should end up very similar to how the &lt;a href=&quot;http://www.cheesy.at/fotos/leben-in-belfast/2019-2/sonniger-und-frostiger-letzter-tag-im-jahr/&quot;&gt;current gallery&lt;/a&gt; looks like.&lt;/p&gt;

&lt;p&gt;While I’m now confident about the basics, I’m wondering how the thumbnail rendering will fit into the incremental rendering. I’ve stumbled over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Drops&lt;/code&gt; while browsing through the object tree, which seem to represent the target file before it is written? Tune in on the weekend to see me figure it out, or fail hilariously!&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><summary type="html">Following up on the last post, today I’m catching up on reporting my latest activities.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt3: The best laid plans, of mice and persons …</title><link href="https://club.black.co.at/log/posts/2020-01-11-plans-of-mice-and-persons/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt3: The best laid plans, of mice and persons …" /><published>2020-01-11T00:00:00+00:00</published><updated>2020-01-11T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-01-11-plans-of-mice-and-persons/plans-of-mice-and-persons</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-01-11-plans-of-mice-and-persons/index.html">&lt;p&gt;Following up on &lt;a href=&quot;../2020-01-05-detailed-plans&quot;&gt;last week’s post&lt;/a&gt;, today I’m gonna talk about the latest insights, hurdles and developments.&lt;/p&gt;

&lt;h1 id=&quot;current-status&quot;&gt;Current Status&lt;/h1&gt;

&lt;p&gt;Last week I left off after getting some basic rendering working and linking up the newly generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GalleryPage&lt;/code&gt; instances into the jekyll &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt;. After posting the write-up I did investigate a bit further, as I was having troubles getting the paths between the source and destination sorted out. Eventually I found that jekyll has a separate &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/654d3810395f2247a699b3aa3f828bc6d1ef30f6/lib/jekyll/document.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document&lt;/code&gt;&lt;/a&gt; class that takes care of entries in &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt;, which does handle path handling when the source is a underscore-directory, but duplicates/re-implements a lot of the remaining functionality, but differently.&lt;/p&gt;

&lt;p&gt;To stay as close as possible to the original plan, I’ll substitute and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document&lt;/code&gt; and see whether that fixes the path-translation issues I’ve been encountering when building the site. If that doesn’t work out, I’ll have to go back and modify the design and workflow of the generator. Maybe putting the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_galleries&lt;/code&gt; folder content instead directly into the site and only go back and patch-up already instantiated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pages&lt;/code&gt; also works? This might even give more flexibility in the long-run, as any layout/page could access the new data for any images in that page/tree. Decision anxiety is a thing :-(, I’ve been on-and-off mulling over this for the last few days and both approaches have their merit. I’ll need to build (at least some of) both to test my assumptions.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I’ll start with replacing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page&lt;/code&gt;s with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document&lt;/code&gt;s. This seems to be the smaller operation and will give me a better understanding of the feasibility of this and what else is there in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;Collections&lt;/a&gt; are configured by adding an entry in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;collections:
  - galleries
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;doing so already creates an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll::Collection&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.collections['galleries']&lt;/code&gt; that has entries for every file in the directory tree:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[7] pry(#&amp;lt;Jekyll::Collection&amp;gt;):1&amp;gt; entries
=&amp;gt; [&quot;.&quot;,
 &quot;first&quot;,
 &quot;first/.&quot;,
 &quot;first/Halloween13-39.jpg&quot;,
 &quot;first/2012-07-29-Eingeschlafen.jpg&quot;,
 &quot;first/index.html&quot;,
 &quot;second&quot;,
 &quot;second/.&quot;,
 &quot;second/Frostig-001.jpg&quot;,
 &quot;second/Frostig-003.jpg&quot;,
 &quot;second/third&quot;,
 &quot;second/third/.&quot;,
 &quot;second/third/Morgenspaziergang-2.jpg&quot;,
 &quot;second/third/Morgenspaziergang-3.jpg&quot;]
[8] pry(#&amp;lt;Jekyll::Collection&amp;gt;):1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but there is no rendering of anything happening, as the documentation helpfully points out. To change that we need to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output: true&lt;/code&gt; on the collection:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;collections:
  galleries:
    output: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and lo and behold, the index is rendered without any functionality in the cheesy-generator:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;david@zion:~/Projects/cheesy-gallery/spec/fixtures/test_site$ cat _galleries/first/index.html
---
x_layout: gallery
title: &quot;The first Gallery&quot;
---
This is a test gallery. The first of its kind.
david@zion:~/Projects/cheesy-gallery/spec/fixtures/test_site$ cat _site/galleries/first/index.html
This is a test gallery. The first of its kind.
david@zion:~/Projects/cheesy-gallery/spec/fixtures/test_site$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve disabled layouting with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x_&lt;/code&gt; prefix there to avoid a lot of irrelevant HTML, but enabling it does do the right thing and applies the layout tree through Liquid.&lt;/p&gt;

&lt;p&gt;Image data, of course, is passed through unmodified.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; attribute on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt; contains all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document&lt;/code&gt; instances. There is one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first/index.html&lt;/code&gt;, but none for the image-only directories. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;files&lt;/code&gt; attribute contains all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticFile&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;Another annoying quirk is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entries&lt;/code&gt; is a flat array. The documentation explains how to iterate over that in Liquid.&lt;/p&gt;

&lt;p&gt;The documentation enumerates a few other attributes a collection entry (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document&lt;/code&gt;) can have. None of them specifically useful to the nested gallery usecase.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/commit/d95692f21c25fb677b7748a350afca55e6dcd584&quot;&gt;this commit&lt;/a&gt; I implement all that I thought I had last weekend, but didn’t work, in a really nice and clean fashion:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def generate(site)
  @site = site
  collection = site.collections['galleries']

  # all galleries in the site
  galleries = Set[*collection.entries.map { |e| File.dirname(e) }]

  # all galleries with an index.html
  galleries_with_index = Set[*collection.entries.find_all { |e| e.end_with?('/index.html') }.map { |e| File.dirname(e) }]

  # fill in Documents for galleries that don't have an index.html
  (galleries - galleries_with_index).each do |e|
    doc = CheesyGallery::GalleryIndex.new(File.join('_galleries', e, 'index.html'), site: site, collection: collection)
    doc.read
    collection.docs &amp;lt;&amp;lt; doc if site.unpublished || doc.published?
  end

  files_by_dirname = {}
  collection.files.each { |e| (files_by_dirname[File.dirname(e.relative_path)] ||= []) &amp;lt;&amp;lt; e }

  collection.docs.each do |doc|
    # attach images
    doc.data['images'] = files_by_dirname[File.dirname(doc.relative_path)]
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;galleries&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;galleries_with_index&lt;/code&gt; are calculated to be able to create new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheesyGallery::GalleryIndex&lt;/code&gt; instances for galleries that do not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. Then, the new Documents get created to fill in the blanks. Since jekyll maintains everything in flat lists, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;files_by_dirname&lt;/code&gt; is used to make the image linking easier. Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; attribute is filled with all files belonging to a specific document.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery.html&lt;/code&gt;, I make some changes to show the images as an example how it can be used. For the next time I get around to this, I update the &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1&quot;&gt;project on github&lt;/a&gt; with what I managed today and enhance the description of what to do next, as well as a couple of ideas for going forward.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><summary type="html">Following up on last week’s post, today I’m gonna talk about the latest insights, hurdles and developments.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt2: Technical Planning</title><link href="https://club.black.co.at/log/posts/2020-01-05-detailed-plans/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt2: Technical Planning" /><published>2020-01-05T00:00:00+00:00</published><updated>2020-01-05T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-01-05-detailed-plans/detailed-plans</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-01-05-detailed-plans/index.html">&lt;p&gt;This post contains the more detailed technical planning and how successfull those ideas were.&lt;/p&gt;

&lt;h1 id=&quot;the-plan&quot;&gt;The Plan&lt;/h1&gt;

&lt;p&gt;These are the points from the &lt;a href=&quot;../2020-01-04-starting-new-project&quot;&gt;last post&lt;/a&gt; that I want to hit with my implementation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new gallery by adding a folder of pictures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Support a nested folder/gallery structure.
    &lt;ul&gt;
      &lt;li&gt;Find nested galleries.&lt;/li&gt;
      &lt;li&gt;Build a page tree to navigate through galleries.&lt;/li&gt;
      &lt;li&gt;Custom thumbnail for each gallery.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optimize picture files for multiple display sizes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow mixing in some text into the gallery index pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expose everything through jekyll’s layout system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow easy linking to specific pictures from any page across the site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Provide the same tools for individual pictures attached to pages (rather than being hosted in a full gallery).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;implementation-map&quot;&gt;Implementation Map&lt;/h1&gt;

&lt;p&gt;Following the insights from my work leading the &lt;a href=&quot;2020-01-04-starting-new-project&quot;&gt;last post&lt;/a&gt;, this is how I expect the new plugin to work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;setup: a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_galleries&lt;/code&gt; folder hosting all pictures&lt;/li&gt;
  &lt;li&gt;generator: load that folder into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; object&lt;/li&gt;
  &lt;li&gt;generator: build a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; tree referencing each of the folders/galleries&lt;/li&gt;
  &lt;li&gt;code: have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticFile&lt;/code&gt; equivalent for managing picture rendering on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;generator: add such image file instances for each picture&lt;/li&gt;
  &lt;li&gt;layout: provide page templates for a gallery and a picture page&lt;/li&gt;
  &lt;li&gt;let jekyll render everything&lt;/li&gt;
  &lt;li&gt;???&lt;/li&gt;
  &lt;li&gt;profit!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;project-start-up&quot;&gt;Project Start Up&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;created a new github repo for &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery&quot;&gt;cheesy-gallery&lt;/a&gt; and set up a new gem, &lt;a href=&quot;https://travis-ci.org/DavidS/cheesy-gallery&quot;&gt;travis&lt;/a&gt;, &lt;a href=&quot;https://codecov.io/gh/DavidS/cheesy-gallery&quot;&gt;codecov&lt;/a&gt;, rubocop and &lt;a href=&quot;https://app.dependabot.com/accounts/DavidS/repos/231789729&quot;&gt;dependabot&lt;/a&gt; (&lt;a href=&quot;https://dependabot.com/&quot;&gt;homepage&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;created a new project for cheesy-gallery to capture the even more detailed planning: &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1&quot;&gt;https://github.com/DavidS/cheesy-gallery/projects/1&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Started on building a simple integration test setup with a &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/tree/master/spec/fixtures/test_site&quot;&gt;test site&lt;/a&gt; and a quick &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/blob/d39a44cf33bea0ea3909b51016c64168e34c211b/.travis.yml#L13-L20&quot;&gt;build step&lt;/a&gt; on travis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Managed to knock out the &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1#card-31178444&quot;&gt;first programming step&lt;/a&gt; on the board, even though I was severly distracted by watching TV :-D&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;current-status&quot;&gt;Current status&lt;/h1&gt;

&lt;p&gt;So the plugin already can correctly recreate the directory structure of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_galleries&lt;/code&gt; input folder and use a provided layout. Given my current architectural understanding of jekyll, I’m pretty chuffed to get this done in a (very relaxed) weekend.&lt;/p&gt;

&lt;p&gt;The most important insight of this work was realising that - and understanding why - jekyll plugins can’t supply layouts. Initially my expectation was that I could add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GalleryPage&lt;/code&gt; instances, declare/request a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; layout and provide a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/gallery.html&lt;/code&gt; liquid template in the gem. As it turns out, jekyll has no provisions for this. The key limitation, I believe, is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery.html&lt;/code&gt; liquid template would have to link up the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.html&lt;/code&gt; layout from the theme. Since between the user and the theme there is no true “main” template that this could link up to. Is it a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; or maybe something completely else? My next though now is that I’ll manually design a layout to render a gallery and a picture page and provide that as an example. At the same time it might be nice to have a set of liquid tags that render a default view and reduce the maintenance amount for site owners. This would also reduce the API surface that I’d need to maintain.&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next steps&lt;/h1&gt;

&lt;p&gt;As next steps, I’ve planned out &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1#card-31200100&quot;&gt;list and show images in gallery page
&lt;/a&gt; and &lt;a href=&quot;https://github.com/DavidS/cheesy-gallery/projects/1#card-31178448&quot;&gt;Page Tree Nav&lt;/a&gt; with more details of expected implementation.&lt;/p&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><summary type="html">This post contains the more detailed technical planning and how successfull those ideas were.</summary></entry><entry><title type="html">Jekyll Gallery Hosting pt1: Preface</title><link href="https://club.black.co.at/log/posts/2020-01-04-starting-new-project/index.html" rel="alternate" type="text/html" title="Jekyll Gallery Hosting pt1: Preface" /><published>2020-01-04T00:00:00+00:00</published><updated>2020-01-04T00:00:00+00:00</updated><id>https://club.black.co.at/log/posts/2020-01-04-starting-new-project/starting-new-project</id><content type="html" xml:base="https://club.black.co.at/log/posts/2020-01-04-starting-new-project/index.html">&lt;p&gt;&lt;a href=&quot;http://www.cheesy.at&quot;&gt;The Wife&lt;/a&gt; is running a &lt;a href=&quot;https://en-gb.wordpress.org/&quot;&gt;WordPress&lt;/a&gt; site with over 700 blog posts, recipies and galleries containing over 50GB of pictures on my old hosting server. Between WordPress complaining about PHP being too old to upgrade and myself wanting to get that site off the old infrastructure, I’ve started looking into migrating her page to a less resource-hungry, easier to maintain solution. Since this blog here is running on jekyll, I thought I’ll give it a try.&lt;/p&gt;

&lt;p&gt;Over the holidays I did a lot of research and experimentation, and now I’m finalising the plan to do so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use the &lt;a href=&quot;http://import.jekyllrb.com/docs/wordpress/&quot;&gt;jekyll&amp;lt;-WordPress&lt;/a&gt; importer to download all posts from the old site. This is working OK and generates markdown files for each blog post and page. One issue to address is that the importer is confused about where to clean up HTML entities and where not. While this might need manual intervention before the switch-over, it’ll be a one-time global search&amp;amp;replace operation, so I’m not overly concerned.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Port the theme over. This will be a wholly manual process. Since the original site already is styled and there is no interest in changing the theme, this will be rather straight-forward (famous last words). Lift&amp;amp;shift into sass and git will hopefully mean an easier time maintaining it going forward - as opposed to the web-based theme editor of wordpress with no version control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep everything in version control. For the base posts and pages, I’ll use git. For the image data, I’m planning on using &lt;a href=&quot;https://git-annex.branchable.com/&quot;&gt;git-annex&lt;/a&gt; to keep the repo size manageable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find a solution for the galleries. This one as it turned out was a lot more complicated than I initially thought, as Christine’s galleries far exceed the capabilities of any existing solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a server-side push hook to build and deploy the website when a new revision is uploaded. I could use this for my own blog too, as I’m still manually building and rsyncing from my workstation :-D&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is a rough summary of my research until now and a sketch of a solution for the galleries. I’ll follow up with more posts as I progress through development.&lt;/p&gt;

&lt;h1 id=&quot;existing-jekyll-gallery-solutions&quot;&gt;Existing Jekyll Gallery Solutions&lt;/h1&gt;

&lt;p&gt;Recommendations from a &lt;a href=&quot;https://talk.jekyllrb.com/t/jekyll-photo-gallery/1499&quot;&gt;jekyll forum thread&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.cloudcannon.com/jekyll/photo-gallery/&quot;&gt;CloudCannon gallery&lt;/a&gt;:&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/jekyll-gallery-generator&quot;&gt;ggreer/jekyll-gallery-generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aerobless/jekyll-photo-gallery&quot;&gt;aerobless/jekyll-photo-gallery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexivkin/Jekyll-Art-Gallery-Plugin&quot;&gt;alexivkin/Jekyll-Art-Gallery-Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That thread has a few other recommendations that look even less appealing than these.&lt;/p&gt;

&lt;p&gt;Other projects I’ve looked at:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rbuchberger/jekyll_picture_tag&quot;&gt;rbuchberger/jekyll_picture_tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as I can tell after investigating those projects, they all fall flat on one or more of the following points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can handle only a single gallery - Christine has hundreds of folders of pictures&lt;/li&gt;
  &lt;li&gt;Needs manual data entry do add pictures to galleries - Christine has the pictures sorted into folders already&lt;/li&gt;
  &lt;li&gt;Pictures are not optimized on build - Christine is using pictures from a DSLR, and even mobile phone cameras today can produce quite hefty images&lt;/li&gt;
  &lt;li&gt;Optimized picture cache is not handled properly - Projects either have no cache or do not expire the cache. Both unacceptable given the size of the site&lt;/li&gt;
  &lt;li&gt;Unmaintained crap&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;other-static-site-generators&quot;&gt;Other static site generators&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gohugo.io&quot;&gt;HUGO&lt;/a&gt;: while claiming to have a lot of built-in functionality, it does not provide a gallery. The &lt;a href=&quot;https://github.com/liwenyip/hugo-easy-gallery&quot;&gt;only external plugin I could find&lt;/a&gt; is currently looking for help with maintenance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby.js&lt;/a&gt;: while claiming to have loads of plugins, it only has one gallery plugin which seems to be suffering from the same issues plaguing the jekyll plugins.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;jekyll-architecture&quot;&gt;Jekyll Architecture&lt;/h1&gt;

&lt;p&gt;jekyll itself is a wrapper around the Liquid templating language. Being two separate projects might be nice from a maintainability standpoint (liquid is a shopify project, jekyll a github.com project), but this split is not great for extensibility and understanding the architecture.&lt;/p&gt;

&lt;p&gt;tl;dr: During each site build, jekyll loads all data into a memory structure (a &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/site.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll::Site&lt;/code&gt;&lt;/a&gt; instance) with &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/page.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll::Page&lt;/code&gt;&lt;/a&gt; entries for every markdown file and &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/static_file.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll::StaticFile&lt;/code&gt;s&lt;/a&gt; for everything else. Additional data gets loaded into &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt;, which will be available in the &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;layouts&lt;/a&gt; through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/plugins/generators/&quot;&gt;Generators&lt;/a&gt; act on the built &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; data structure before it is rendered to the target directory. &lt;a href=&quot;https://jekyllrb.com/docs/plugins/tags/&quot;&gt;Tags&lt;/a&gt; extend the liquid templating language.&lt;/p&gt;

&lt;h1 id=&quot;first-wrap-up&quot;&gt;First Wrap-up&lt;/h1&gt;

&lt;p&gt;Looking back at all that, I think the various projects’ shortcomings can all be directly traced to those architectural choices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;rbuchberger/jekyll_picture_tag: this is only a liquid tag that does all the picture crunching during the render stage. Therefore it can’t change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; structure anymore and is outside the caching/incremental build support jekyll provides. It also means there is no way to theme the output of the tag, as there is also no connection to jekyll’s layout system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;alexivkin/Jekyll-Art-Gallery-Plugin: looks like an unmaintained 2016 rip-off of ggreer’s plugin to me. hard pass.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;aerobless/jekyll-photo-gallery: requires adding each gallery to the site config, then renders from that information&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ggreer/jekyll-gallery-generator: replaces some entries in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; object with custom instances that add gallery functionality. For some unknown-to-me reason the plugin does not support nested galleries and does write out the site pages while adding new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GalleryPage&lt;/code&gt; objects to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt;. I tried to add nested galleries, but soon floundered on the details as nothing in the plugin’s structure is prepared for that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-plan&quot;&gt;The Plan&lt;/h1&gt;

&lt;p&gt;After a good two or three days of research I therefore resign myself to the fact that I want to implement a jekyll gallery plugin myself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new gallery by adding a folder of pictures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Support a nested folder/gallery structure.
    &lt;ul&gt;
      &lt;li&gt;Find nested galleries.&lt;/li&gt;
      &lt;li&gt;Build a page tree to navigate through galleries.&lt;/li&gt;
      &lt;li&gt;Custom thumbnail for each gallery.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optimize picture files for multiple display sizes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow mixing in some text into the gallery index pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expose everything through jekyll’s layout system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow easy linking to specific pictures from any page across the site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Provide the same tools for individual pictures attached to pages (rather than being hosted in a full gallery).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;p&gt;All the other links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll Repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/guide&quot;&gt;SASS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt; ; &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers&quot;&gt;for programmers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://schema.org/&quot;&gt;data schemas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/default.asp&quot;&gt;CSS Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;twitter&quot;=&gt;&quot;dev_el_ops&quot;}</name></author><category term="programming" /><category term="devops" /><category term="hosting" /><category term="deployment" /><category term="applications" /><category term="jekyll" /><category term="programming" /><summary type="html">The Wife is running a WordPress site with over 700 blog posts, recipies and galleries containing over 50GB of pictures on my old hosting server. Between WordPress complaining about PHP being too old to upgrade and myself wanting to get that site off the old infrastructure, I’ve started looking into migrating her page to a less resource-hungry, easier to maintain solution. Since this blog here is running on jekyll, I thought I’ll give it a try.</summary></entry></feed>